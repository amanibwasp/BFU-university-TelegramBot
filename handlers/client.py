import asyncio
import datetime
import pytz

from main import bot, dp, table
from config import TIME_OPEN, TIME_CLOSE, ADMINS, ALERT_TEXT  # TIME_OPEN, TIME_CLOSE - depends on ur schedule
# ADMINS - a list of admin's IDs.

from utils.keyboards import *
from utils.functions import *
from aiogram.dispatcher import FSMContext
from aiogram_calendar import simple_cal_callback, SimpleCalendar


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    neon = open('img/neon.jpg', 'rb')
    text = '''
<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –°—Ç—É–¥—Ö–∞—É—Å–∞ –ë–§–£ –∏–º. –ò. –ö–∞–Ω—Ç–∞</b> üëª

<i>–°—Ç—É–¥—Ö–∞—É—Å –ë–§–£ –∏–º. –ò. –ö–∞–Ω—Ç–∞ - —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</i>
–ó–¥–µ—Å—å –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –≤—Å—Ç—Ä–µ—á–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ë–§–£ –∏–º. –ò. –ö–∞–Ω—Ç–∞.
    '''
    await bot.send_photo(message.from_user.id, photo=neon,
                         caption=text,
                         reply_markup=start_keyboard())


@dp.message_handler(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é', state=None)
async def book_auditorium(message: types.Message):
    text = '''
–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞

üìå —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π –º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å –≤–Ω–∏–∑
    '''
    await bot.send_message(message.from_user.id, text, reply_markup=choose_auditorium_kb())
    await FSMBook.auditorium.set()


@dp.message_handler(state=FSMBook.auditorium)
async def book_auditorium_answer(message: types.Message, state: FSMContext):
    if message.text in audiences:
        await state.reset_state(with_data=False)
        await bot.send_message(message.from_user.id, f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {message.text}',
                               reply_markup=ReplyKeyboardRemove())
        await message.delete()
        await state.update_data(dict(auditorium=message.text))
        await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:',
                               reply_markup=await SimpleCalendar().start_calendar())
    else:
        await bot.send_message(message.from_user.id,
                               f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è {message.text} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é',
                               reply_markup=choose_auditorium_kb())


@dp.callback_query_handler(simple_cal_callback.filter())
async def process_simple_calendar(callback: types.CallbackQuery, callback_data: dict,
                                  state: FSMContext):
    data = await state.get_data()
    is_ready, date = await SimpleCalendar().process_selection(callback, callback_data)

    if is_ready:
        await callback.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {date.date()}')

        time_to_start = datetime.datetime.combine(date, datetime.time(hour=12, minute=0))
        await state.update_data(dict(
            time_to_start=time_to_start,
            duration=datetime.timedelta(hours=0, minutes=5)))
        text = '''
<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
    
–°–µ–π—á–∞—Å —É–∫–∞–∑–∞–Ω–æ: 12:00
            '''

        can_book = can_i_book(data['auditorium'], time_to_start,
                              datetime.timedelta(minutes=5), table.get())
        if not can_book:
            text += f'\n{ALERT_TEXT}'
        await bot.send_message(callback.from_user.id,
                               text,
                               reply_markup=choose_time_to_start(can_book=can_book),
                               parse_mode='HTML')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'update_time_to_start')
async def update_time_to_start(callback: types.CallbackQuery, state: FSMContext):
    ex_text = callback.message.text
    ex_kb = callback.message.reply_markup

    text = '–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {}'

    hours, minutes = map(int, callback.data.split()[1:])
    data = await state.get_data()
    time_to_start = data['time_to_start']
    new_time_to_start = time_to_start + datetime.timedelta(hours=hours, minutes=minutes)
    if TIME_OPEN <= new_time_to_start.time() <= TIME_CLOSE:
        await state.update_data(dict(time_to_start=new_time_to_start))

        can_book = can_i_book(data['auditorium'], new_time_to_start,
                              datetime.timedelta(minutes=5), table.get())
        text = text.format(beauty_time(new_time_to_start))
        if not can_book:
            text += f'\n{ALERT_TEXT}'

        await callback.message.edit_text(
            text=text.format(beauty_time(new_time_to_start)),
            reply_markup=choose_time_to_start(can_book=can_book),
            parse_mode='HTML')
    else:
        await callback.message.edit_text(
            '‚ùå <b>–°—Ç—É–¥—Ö–∞—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 9:00 –¥–æ 21:30</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞')
        await asyncio.sleep(1)
        await callback.message.edit_text(ex_text, reply_markup=ex_kb)


@dp.callback_query_handler(text='accept_time_to_start')
async def accept_time_to_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()

    data = await state.get_data()
    time_to_start = data['time_to_start']

    await bot.send_message(callback.from_user.id,
                           f'–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {beauty_time(time_to_start)}')

    text = '''
<b>–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>

—Å–µ–π—á–∞—Å –∞—É–¥–∏—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 00:05
    '''
    await bot.send_message(callback.from_user.id, text, reply_markup=choose_duration())


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'update_duration')
async def update_duration(callback: types.CallbackQuery, state: FSMContext):
    ex_text = callback.message.text
    ex_kb = callback.message.reply_markup

    text = '—Å–µ–π—á–∞—Å –∞—É–¥–∏—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {}'

    hours, minutes = map(int, callback.data.split()[1:])
    data = await state.get_data()
    duration = data['duration']
    new_duration = duration + datetime.timedelta(hours=hours, minutes=minutes)
    min_duration = 5 * 60
    if new_duration.total_seconds() >= min_duration and TIME_OPEN <= (
            data['time_to_start'] + new_duration).time() <= TIME_CLOSE:
        can_book = can_i_book(data['auditorium'], data['time_to_start'], new_duration, table.get())
        text = text.format(beauty_time(new_duration))
        if not can_book:
            text += f'\n{ALERT_TEXT}'
        await state.update_data(dict(duration=new_duration))
        await callback.message.edit_text(
            text=text,
            reply_markup=choose_duration(can_book=can_book))
    else:
        if new_duration.total_seconds() < min_duration:
            await callback.message.edit_text(
                '‚ùå <b>–û—à–∏–±–∫–∞, –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è</b>')
        else:
            await callback.message.edit_text(
                '‚ùå <b>–°—Ç—É–¥—Ö–∞—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 9:00 –¥–æ 21:30</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è')

        await asyncio.sleep(1)
        await callback.message.edit_text(ex_text, reply_markup=ex_kb)


@dp.callback_query_handler(text='accept_duration')
async def accept_duration(callback: types.CallbackQuery, state: FSMContext):
    await FSMBook.phone.set()
    data = await state.get_data()
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    kb.add(KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏', request_contact=True))
    await callback.message.edit_text(
        f'–ê—É–¥–∏—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: {beauty_time(data["duration"])}')
    await bot.send_message(callback.from_user.id, '–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                           reply_markup=kb)


@dp.message_handler(content_types=ContentType.CONTACT, state=FSMBook.phone)
async def get_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.reset_state(with_data=True)

    phone = message.contact.phone_number
    time_now = datetime_kld()
    time_to_start = data['time_to_start']
    duration = data['duration']
    auditorium = data['auditorium']

    if not can_i_book(auditorium, time_to_start, duration, table.get()):
        await message.answer(
            '<b>‚ùå –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –±—Ä–æ–Ω–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑</b>',
            reply_markup=start_keyboard())
        return

    await bot.send_message(message.from_user.id, 'üéâ <b>–°–ø–∞—Å–∏–±–æ, –º—ã –í–∞–º —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º!</b>',
                           reply_markup=start_keyboard())
    await state.reset_state(with_data=False)

    row = table.append_row(str(time_now).split('.')[0],
                           auditorium,
                           str(time_to_start),
                           str(time_to_start + duration),
                           phone,
                           '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')

    updated_range = row['updates']['updatedRange'].split('!')[1]

    text = f'''
üëâ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b> 

–ê—É–¥–∏—Ç–æ—Ä–∏—è: {auditorium}
–î–∞—Ç–∞: {time_to_start.date()}
–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {time_to_start.time()}
–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –±—Ä–æ–Ω–∏—Ä–≤–∞–Ω–∏—è: {(time_to_start + duration).time()}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}

<u>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å?</u>
    '''
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(text='‚úÖ', callback_data=f'book confirm {updated_range}'),
        types.InlineKeyboardButton(text='‚ùå', callback_data=f'book deny {updated_range}'),
    )
    for admin in ADMINS:
        try:
            await bot.send_message(
                admin,
                text=text,
                reply_markup=kb
            )
        except Exception as ex:
            pass
